= IMPORTANT:

While the information here is not useless, if you can, please use the more up-to-date version based on docker: https://gitlab.com/yujiyokoo/docker-mruby-kos-dc

= mruby-dreamcast

mruby-dreamcast is a collection of scripts and settings to build a VM environment for building Dreamcast executable binaries with mruby.

== Demo video

This is a game developed using this project: https://vimeo.com/335686570

== Goals

This project aims to provide a set of tools that are easy to set up to develop Dreamcast binaries.

== What works (and what doesn't)

* mruby in general works
* API calls provided by the platform (KallistiOS) but currently you have to write your wrapper

The intention is that more API calls will be available without your own wrapper.
Currently there is no support for VMU or sound but hopefully something will be available soon.

Also, in order to make builds work, the mruby-io gem has been taken out.

== What you need

This project depends on many tools and libraries, but first, you need:

* A computer with a working vagrant installation
* Disk space (of about ~10GB)

Please note this has been developed on macOS High Sierra, Vagrant 2.2.4 and VirtualBox 5.2.28.
VirtualBox 5 is recommended.
VirtualBox 6 might work, but it has not been tested.

This has not been tested with VMware at all, and is not expected to work on it.

Also please note the default configuration is to use bridged network on the VM, which means the VM behaves like it is connected directly to the same network as your computer.
If this is not desirable, please edit `Vagrantfile` and change the network config.

== What you might also want to have (optional)

* A Dreamcast that supports booting from CD-Rs (MIL-CD support)
* A dreamcast serial cable ("coders cable")
* A CD-R drive and some CD-R discs

Information on how to use these will be added later.

== Installation

.Steps
. Ensure you have sufficient disc space
. Install https://www.virtualbox.org/wiki/Downloads[VirtualBox] for your host computer
. Install https://www.vagrantup.com/docs/installation/[Vagrant] for your host computer
. Run `vagrant plugin install vagrant-vbguest` to install the vagrant-vbguest plugin (to keep Guest Additions up to date)
. Install https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html[ansible]
. Clone this repo to somewhere on your host computer
. Copy `vars.yml.example` to `vars.yml` and edit contents to set your name and email address for the git user
. Run `> vagrant up` from your shell (expect this to take _a while_)
+
You will probably get asked what you want to do with the network interface (if you don't, never mind!).
It may be something like this:
+
----
==> default: Available bridged network interfaces:
1) en0: Wi-Fi (AirPort)
2) p2p0
3) awdl0
4) en1: Thunderbolt 1
5) en2: Thunderbolt 2
6) bridge0
==> default: When choosing an interface, it is usually the one that is
==> default: being used to connect to the internet.
    default: Which interface should the network bridge to?
----
+
If you get this, please select one that is connected to your physical network (1 in this case).
It will probably depend on your hardware and OS setup.
+
[NOTE]
===============================
Optionally, you can set this network config value in the network configuration of your `Vagrantfile`.
Please see the comments around lines containing `config.vm.network` in `Vagrantfile`.
===============================
+
. As you encounter issues, unfortunately, all I can say is please fix them. You might get a few problems
. If you received errors from `vagrant up`, and corrected the problem somehow, you could run `vagrant reload --provision` to retry.
. If the above command (`vagrant up` or `vagrant reload --provision`) completes without error messages, it should be all good to go.

Once it's all done, you are ready to start developing.
Please refer to the project "mrbtris" to get started on development.

If you get stuck, find bugs, or have a better solution to problems, please report issues.
Thanks!

== Current issues

* Convoluted build process, in particular, the playbook.yml expects mruby build to fail sh4 once, then copy a file built for the host, and retries
* Needing a lot of disc
* No platform API calls available without writing C code
* Only tested on 1 environment

== TODO (in no particular order)

* make the mruby build better, especially around building once for host, once for DC
* Provide wrappers for API calls, maybe via an mrbgem
* Reduce the disc space required
* Provide information on the serial cable
* put some build chunks into its own yml or a shell script
* scripted/automated test
* consider alternatives to checking out specific versions and patching them

== Licence

Unless otherwise indicated (which is the case for "un.h_for_kos_include_sys" or originally "sys/un.h"), this repository is licenced under the MIT licence.
